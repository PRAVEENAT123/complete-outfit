{% if product %}
  <div class="product-card">
    <h2>{{ product.title }}</h2>
    <img src="{{ product.featured_image | image_url }}" alt="{{ product.title }}" width="200" height="200">
    <p>Price: {{ product.price | money }}</p>
    <p>{{ product.description }}</p>

    {% if product.metafields.combo_products and product.metafields.combo_products.included_products %}
      <p><strong>Combo Product:</strong></p>

      <p><strong>Metafield Raw Data:</strong> {{ product.metafields.combo_products.included_products }}</p>

      {% assign metafield_string = product.metafields.combo_products.included_products | remove: "[" | remove: "]" | remove: '"' %}
      {% assign included_product_gids = metafield_string | split: "," %}

      {% if included_product_gids.size > 0 %}
        <ul id="combo-products-list">
          {% for gid in included_product_gids %}
            <li><strong>Metafield GID:</strong> {{ gid }}</li>
            {% assign product_id = gid | split: "/" | last %}
            <li><strong>Extracted Product ID:</strong> {{ product_id }}</li>
            <li id="combo-product-{{ product_id }}">Loading...</li> <!-- Placeholder for combo product -->
          {% endfor %}
        </ul>
      {% else %}
        <p>⚠️ No included products found.</p>
      {% endif %}
    {% endif %}
  </div>
{% else %}
  <p>No product found.</p>
{% endif %}

<script>
  // Function to fetch product details by ID
  async function fetchProductData(productId) {
    console.log(`Fetching product data for ID: ${productId}`);
    const response = await fetch(`/products/${productId}.json`);
    const data = await response.json();
    const product = data.product;

    if (product) {
      const productContainer = document.getElementById(`combo-product-${productId}`);
      productContainer.innerHTML = `
        <a href="${product.url}">${product.title}</a>
        <span class="price">${product.price_range.min_variant_price.amount} ${product.price_range.min_variant_price.currency_code}</span>
        <img src="${product.featured_image.url}" alt="${product.title}" width="100" height="100">
      `;
    } else {
      const productContainer = document.getElementById(`combo-product-${productId}`);
      productContainer.innerHTML = '⚠️ Product not found.';
    }
  }

  // Loop through the metafield GIDs and fetch data for each included product
  {% assign metafield_string = product.metafields.combo_products.included_products | remove: "[" | remove: "]" | remove: '"' %}
  {% assign included_product_gids = metafield_string | split: "," %}
  {% for gid in included_product_gids %}
    {% assign product_id = gid | split: "/" | last %}
    fetchProductData('{{ product_id }}');
  {% endfor %}
</script>

{% schema %}
{
  "name": "Product Testing Block",
  "target": "section",
  "enabled_on": {
    "templates": ["product"]
  },
  "settings": []
}
{% endschema %}
